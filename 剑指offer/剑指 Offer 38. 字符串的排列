class Solution {
public:
    vector<string> permutation(string s) {
        if(s.empty()){
            return {};
        }
        sort(s.begin(),s.end());
        vector<string> res;
        vector<bool> visit(s.size(),false);
        string track;
        backtrack(res,s, track ,visit);
        return res;

    }
    void backtrack(vector<string> &res,string s, string track,vector<bool> &visit){
        if(track.size()==s.size()){
            res.push_back(track);
            return;
        }
        for(int i=0;i<s.size();i++){
            if(visit[i]) continue;
            if(i>0&&!visit[i-1]&&s[i-1]==s[i]) continue;
            visit[i]=true;
            track.push_back(s[i]);
            backtrack(res,s,track,visit);
            track.pop_back();
            visit[i]=false;
        }

    }


};
